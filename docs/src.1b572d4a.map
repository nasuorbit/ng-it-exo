{"version":3,"sources":["constant.ts","convert/convert.ts","tracker/tracker.ts","exo/exo.ts","index.ts"],"names":[],"mappings":"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","file":"src.1b572d4a.map","sourceRoot":"..\\src","sourcesContent":["\r\nexport const convertBtn = <HTMLButtonElement>document.getElementById(\"convert-btn\")!\r\nexport const inputTextarea = <HTMLTextAreaElement>document.getElementById(\"input-textarea\")!\r\nexport const outputTextarea = <HTMLTextAreaElement>document.getElementById(\"output-textarea\")!\r\nexport const bpmInput = <HTMLInputElement>document.getElementById(\"bpm-input\")!\r\nexport const fpsInput = <HTMLInputElement>document.getElementById(\"fps-input\")!\r\n\r\nexport const getNoteBtn = <HTMLButtonElement>document.getElementById(\"get-note-btn\")!\r\n\r\nexport const exoResetBtn = <HTMLButtonElement>document.getElementById(\"exo-reset-btn\")!\r\n\r\nexport const trackCntInput = <HTMLInputElement>document.getElementById(\"track-cnt-input\")!","import { ngTracker } from \"../tracker/tracker\";\r\nimport { ngExo } from \"../exo/exo\";\r\n\r\nexport class ngConvert {\r\n  bpm: number\r\n  fps: number\r\n  tick: number\r\n  constructor() {\r\n    this.bpm = 60\r\n    this.fps = 60\r\n    this.tick = 1\r\n  }\r\n  setBpm(bpm: string | number) {\r\n    this.bpm = parseInt(bpm as any, 10);\r\n  }\r\n  setFps(fps: string | number) {\r\n    this.fps = parseInt(fps as any, 10);\r\n  }\r\n  setTick(tick: string | number) {\r\n    this.tick = parseInt(tick as any, 10);\r\n  }\r\n  beatToExo(beat: string, exo: ngExo) : string {\r\n\r\n    let start = 0;\r\n    let end = 1;\r\n    console.log(beat)\r\n    for (let i = 0; i < beat.length; i++) {\r\n      const b = beat[i];\r\n      if (b===\"-\")\r\n        continue\r\n      if (b===\"o\") {\r\n        end = this.bpm*i/this.tick\r\n        if (start > 0)\r\n          exo.addScene(start,end,1) // 仮\r\n        start = end+1\r\n      }\r\n    }\r\n    return exo.export()\r\n  }\r\n}","\r\ninterface TrackerData {\r\n  orders: Array<number>\r\n  patterns: Array<PatternData>\r\n}\r\n\r\ninterface PatternData {\r\n  rows: number\r\n  tracks: Array<TrackData>\r\n}\r\n\r\ninterface TrackData extends Array<RowData> {\r\n  [key: number] : RowData\r\n}\r\n\r\ninterface RowData {\r\n  note: string\r\n  instrument: number\r\n  volume: string\r\n  effect: string\r\n}\r\n\r\nexport class ngTracker {\r\n\r\n  inputText: string\r\n  data: TrackerData | undefined\r\n  bpm: number;\r\n  fps: number;\r\n  constructor(text?: string) {\r\n    if (text)\r\n      this.setInputText(text)\r\n  }\r\n\r\n  parse(text: string) : TrackerData {\r\n\r\n    let data : TrackerData = {} as any\r\n    const lines = text.split(\"\\n\")\r\n    if (lines[0] !== \"ModPlug Tracker  IT\")\r\n      throw new Error(\"入力されたデータはModPlug Tracker  ITじゃない\");\r\n\r\n    const orders = this.parseOrders(lines[1])\r\n    if (orders) {\r\n      data.orders = orders\r\n    } else {\r\n      data.orders = [0]\r\n    }\r\n    const patterns = this.parsePatterns(lines)\r\n    data.patterns = patterns\r\n\r\n    console.log(data)\r\n\r\n    return data\r\n  }\r\n\r\n  parsePatterns(lines: Array<string>) : Array<PatternData> {\r\n    let patterns : Array<PatternData> = []\r\n    let pos = 2;\r\n    while(pos < lines.length) {\r\n      const rows = this.parseRows(lines[pos])\r\n      console.log(rows)\r\n      pos += 1;\r\n      if (rows !== false) {\r\n        let pattern : PatternData = {} as any\r\n        pattern.rows = rows\r\n        pattern.tracks = this.parseTracks(lines.slice(pos, pos+rows))\r\n        patterns.push(pattern)\r\n        pos += rows\r\n      }\r\n    }\r\n    return patterns\r\n  }\r\n\r\n  parseTracks(lines: Array<string>) : Array<TrackData> {\r\n    \r\n    const tracksLength = lines[0].split(\"|\").length - 1\r\n    let tracks : Array<TrackData> = new Array(tracksLength)\r\n    for (let t = 0; t < tracks.length; t++) {\r\n      tracks[t] = new Array()\r\n    }\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      const rows = line.split(\"|\").map((s) => this.parseRow(s)) // 最初の一個目は空文字が入るので調節\r\n      for (let t = 0; t < rows.length - 1; t++) {\r\n        tracks[t][i] = rows[t+1]\r\n      }\r\n    }\r\n    console.log(tracks)\r\n    return tracks\r\n  }\r\n\r\n  parseRow(row: string) : RowData {\r\n    let rowData : RowData = {} as any\r\n    rowData.note = row.slice(0,3)\r\n    rowData.instrument = parseInt(row.slice(3,5),16)\r\n    rowData.volume = row.slice(5,8)\r\n    rowData.effect = row.slice(8,10)\r\n    return rowData\r\n  }\r\n\r\n  parseRows(text:string) {\r\n    const keywordRows = \"Rows:\"\r\n    if (text.startsWith(keywordRows)) {\r\n      const rowsLine = text.substring(keywordRows.length)\r\n      return parseInt(rowsLine,10)\r\n    }\r\n    return false\r\n  }\r\n\r\n  parseOrders(text: string) {\r\n    const keywordOrders = \"Orders:\"\r\n    if (text.startsWith(keywordOrders)) {\r\n      const ordersLine = text.substring(keywordOrders.length)\r\n      const orders = ordersLine.split(\",\").map((s)=>parseInt(s,10))\r\n      return orders\r\n    }\r\n    return false\r\n  }\r\n\r\n  setInputText(inputText: string) {\r\n    if (inputText !== this.inputText) {\r\n      this.inputText = inputText\r\n      this.data = this.parse(this.inputText)\r\n    }\r\n  }\r\n\r\n  /*\r\n    // 消す\r\n  setBpm(bpm: string | number) {\r\n    this.bpm = parseInt(bpm as any, 10);\r\n  }\r\n\r\n  //消す\r\n  setFps(fps: string | number) {\r\n    this.fps = parseInt(fps as any, 10);\r\n  }\r\n  */\r\n\r\n  getTrack(tr: number) {\r\n    let tracks : TrackData = []\r\n    const orders = this.data.orders\r\n    for (let i = 0; i < orders.length; i++) {\r\n      tracks.push(...this.data.patterns[orders[i]].tracks[tr])\r\n    }\r\n    return tracks\r\n  }\r\n\r\n  getNoteRhythm(tr: number) {\r\n    let rhythm = \"\"\r\n    const tracks = this.getTrack(tr)\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      const row = tracks[i];\r\n      if(row.note!==\"...\") {\r\n        rhythm += \"o\"\r\n      } else {\r\n        rhythm += \"-\"\r\n      }\r\n    }\r\n    return rhythm\r\n  }\r\n\r\n  toAviutl() : string {\r\n    //const lines = this.parse(this.inputText)\r\n    return this.data.patterns[0].tracks[0][0].note\r\n  }\r\n}","\r\ninterface ngExoObjInfo {\r\n  start: number\r\n  end: number\r\n  layer: number\r\n  overlay: number\r\n  camera: number\r\n}\r\n\r\ninterface ngExoDrawParam {\r\n  _name: \"標準描画\"\r\n  X: number\r\n  Y: number\r\n  Z: number\r\n  拡大率: number\r\n  透明度: number\r\n  回転: number\r\n  blend: number\r\n}\r\n\r\n\r\ninterface ngExoObj {\r\n  info: ngExoObjInfo\r\n  obj: ngExoScene | any\r\n  draw?: ngExoDrawParam\r\n}\r\n\r\ninterface ngExoScene {\r\n  _name: \"シーン\",\r\n  再生位置: number\r\n  再生速度: number\r\n  ループ再生: number\r\n  _: number\r\n}\r\n\r\nexport class ngExo {\r\n  objs: ngExoObj[]\r\n  defInfo: ngExoObjInfo\r\n  defDraw: ngExoDrawParam\r\n  defScene: ngExoScene\r\n  constructor(defInfo?: ngExoObjInfo, defDraw?: ngExoDrawParam){\r\n    if (defInfo) {\r\n      this.defInfo = defInfo\r\n    } else {\r\n      this.defInfo = this._defInfo()\r\n    }\r\n    if (defDraw) {\r\n      this.defDraw = defDraw\r\n    } else {\r\n      this.defDraw = this._defDraw()\r\n    }\r\n    this.defScene = this._defScene()\r\n    this.objs = []\r\n  }\r\n\r\n  reset() {\r\n    this.objs = []\r\n  }\r\n\r\n  assignObjDef(info: Partial<ngExoObjInfo>, obj: any, draw: Partial<ngExoDrawParam>) : ngExoObj {\r\n    return {info: {...this.defInfo, ...info}, obj: {...obj}, draw: {...this.defDraw, ...draw}}\r\n  }\r\n\r\n  addScene(start: number, end:number, _:number) {\r\n    return this._addScene({start: start, end: end},{_: _})\r\n  }\r\n\r\n  _addScene(info: Partial<ngExoObjInfo>, scene: Partial<ngExoScene>, draw?: Partial<ngExoDrawParam>) {\r\n    const obj = this.assignObjDef(info, {...this.defScene, ...scene}, draw)\r\n    console.log(obj)\r\n    this.objs.push(obj)\r\n    return\r\n  }\r\n\r\n  paramStringify(param: object) : string {\r\n    let str = \"\"\r\n    for (let k of Object.keys(param)) {\r\n      if (k===\"_\")\r\n        str += \"=\" + param[k] + \"\\n\"\r\n      else\r\n        str += k + \"=\" + param[k] + \"\\n\"\r\n    }\r\n    return str\r\n  }\r\n\r\n  objStringify(intnum: number, obj: ngExoObj) : string {\r\n    let str = \"\"\r\n    str += \"[\" + intnum + \"]\\n\"\r\n    str += this.paramStringify(obj.info)\r\n    str += \"[\" + intnum + \".\" + 0 + \"]\\n\"\r\n    str += this.paramStringify(obj.obj)\r\n    if (obj.draw) {\r\n      str += \"[\" + intnum + \".\" + 1 + \"]\\n\"\r\n      str += this.paramStringify(obj.draw)\r\n    }\r\n    return str\r\n  }\r\n\r\n  export() : string {\r\n    let output = this._header() + \"\\n\"\r\n    const objs = this.objs\r\n    for (let i = 0; i < objs.length; i++) {\r\n      output += this.objStringify(i, objs[i]);\r\n    }\r\n    return output\r\n  }\r\n\r\n  _header() : string {\r\n    const str = `[exedit]\r\nwidth=1280\r\nheight=720\r\nrate=60\r\nscale=1\r\nlength=6000\r\naudio_rate=44100\r\naudio_ch=2`\r\n    return str\r\n  }\r\n\r\n  _defInfo() : ngExoObjInfo {\r\n    return {\r\n      start: 0,\r\n      end: 1,\r\n      layer: 1,\r\n      overlay: 1,\r\n      camera: 0\r\n    }\r\n  }\r\n\r\n  _defDraw() : ngExoDrawParam {\r\n    return {\r\n      _name: \"標準描画\",\r\n      X: 0,\r\n      Y: 0,\r\n      Z: 0,\r\n      拡大率: 100.0,\r\n      透明度: 0.0,\r\n      回転: 0.0,\r\n      blend: 0\r\n    }\r\n  }\r\n\r\n  _defScene(): ngExoScene {\r\n    return {\r\n      _name: \"シーン\",\r\n      再生位置: 1,\r\n      再生速度: 100.0,\r\n      ループ再生: 0,\r\n      _: 1,\r\n    }\r\n  }\r\n}","import * as El from './constant'\r\nimport { ngConvert } from './convert/convert';\r\nimport { ngTracker } from './tracker/tracker';\r\nimport { ngExo } from './exo/exo';\r\n\r\nconst convert = new ngConvert()\r\nconst tracker = new ngTracker()\r\nconst exo = new ngExo()\r\n\r\nEl.getNoteBtn.onclick = () => {\r\n  setInput(tracker)\r\n  setConfig(convert)\r\n  const tr = parseInt(El.trackCntInput.value,10)\r\n  let outputText\r\n  outputText = convert.beatToExo(tracker.getNoteRhythm(tr), exo)\r\n  El.outputTextarea.value = outputText\r\n}\r\n\r\nEl.exoResetBtn.onclick = () => {\r\n  exo.reset()\r\n}\r\n\r\n\r\nEl.convertBtn.onclick = (e) => {\r\n  setInput(tracker)\r\n  setConfig(convert)\r\n  const tr = parseInt(El.trackCntInput.value,10)\r\n  let outputText\r\n  outputText = tracker.getNoteRhythm(tr)\r\n  El.outputTextarea.value = outputText\r\n}\r\n\r\n\r\nfunction setInput(tracker: ngTracker) {\r\n  try {\r\n    tracker.setInputText(El.inputTextarea.value)\r\n  } catch(e) {\r\n    El.outputTextarea.value = e\r\n  }\r\n}\r\n\r\nfunction setConfig(convert: ngConvert) {\r\n  convert.setBpm(El.bpmInput.value)\r\n  convert.setFps(El.fpsInput.value)\r\n}\r\n\r\nconsole.log(\"hello\")"]}